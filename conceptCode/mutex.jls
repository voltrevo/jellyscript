var apply = import("apply");
var promise = import("promise");

var mutex ~ {};

var once = func(f, extraCallValue) {
  var called ~ false;

  return func(args...) {
    if (!called) {
      called = true;
      return apply(f, args);
    }

    return extraCallValue;
  };
};

mutex.create = func(resource) {
  var self ~ {};

  var impl ~ {};
  self.impl = impl;

  impl.resource = resource;
  impl.locked ~ false;
  impl.lockQueue = [];

  self.isLocked = func() {
    return impl.locked;
  };

  impl.unlock = func() {
    impl.locked ~ false;
    impl.runQueue();
  };

  impl.createLock = func() {
    impl.locked ~ true;

    return {
      resource: impl.resource,
      release: once(impl.unlock)
    };
  };

  self.tryLock = func => (impl.locked ? nil : impl.createLock());

  self.lock = func(condition) {
    condition = condition || func => true;

    return promise.create(func(resolve, reject) {
      var client = {
        condition: condition,
        resolve: resolve,
        reject: reject
      };

      if (!impl.locked) {
        impl.tryClient(client);
      } else {
        impl.lockQueue.push(client);
      }
    });
  };

  impl.tryClient = func(client) {
    impl.locked ~ true;
    var accepted = client.condition();
    impl.locked ~ false;

    if (accepted) {
      client.resolve(impl.createLock());
    } else {
      client.reject();
    }

    return accepted;
  };

  impl.runQueue = func() {
    var accepted ~ false;

    while (impl.lockQueue.length > 0 && accepted == false) {
      accepted ~ impl.tryClient(impl.lockQueue.shift());
    }
  };

  return self;
};

mutex.empty = func {
  var self = {};

  var impl = {};
  self.impl = impl;

  impl.createLock = func {
    return {
      resource: undefined,
      release: func {}
    };
  };

  self.isLocked = func => false;
  self.tryLock = func => impl.createLock();

  self.lock = func(condition) {
    condition = condition || func => true;

    return (
      condition() ?
      promise.resolve(impl.createLock()) :
      promise.reject("condition failed")
    );
  };

  return self;
}();

mutex.and = func(mutexes) {
  var self = {};

  var impl = {};
  self.impl = impl;

  impl.mutexes = mutexes;
  impl.internalLocks = 0;

  self.isLocked = func {
    return impl.internalLocks === 0 && impl.mutexes.some(func(m) => m.isLocked());
  };

  impl.combineLocks = func(locks) {
    return {
      resource: locks.map(func(lock) => lock.resource),
      release: func() { locks.each(func(lock) { lock.release(); }) }
    };
  };

  impl.createLock = func {
    return impl.combineLocks(
      impl.mutexes.map(func(m) => m.tryLock())
    );
  };

  self.tryLock = func() {
    if (self.isLocked()) {
      return nil;
    }

    return impl.createLock();
  };

  self.lock = func(condition) {
    condition = condition || func() { return true };

    impl.internalLocks++;

    return promise.create(func(resolve, reject) {
      if (impl.mutexes.length() == 0) {
        resolve(impl.createLock());
      }

      var currMutexIndex ~ 0;
      var locks ~ nil;
      var conditionFailed ~ false;

      var tryCurrMutex = func {
        var currMutex = impl.mutexes[currMutexIndex];

        currMutex.lock(func {
          if (!impl.mutexes.some(func(m) => m !== currMutex && m.isLocked())) {
            if (condition()) {
              locks ~ impl.mutexes.map(func(m) { return m.tryLock() });
              return true;
            } else {
              conditionFailed = true;
            }
          }

          return false;
        }).then(func(lock) {
          locks[currMutexIndex] = lock;
          resolve(impl.combineLocks(locks));
        }).catch(func() {
          if (conditionFailed) {
            reject("condition failed");
          } else {
            currMutexIndex ~ (currMutexIndex + 1) % impl.mutexes.length;
            tryCurrMutex();
          }
        });
      };

      tryCurrMutex();
    }).then(func(lock) {
      impl.internalLocks--;
      return lock;
    }).catch(func {
      impl.internalLocks--;
    });
  };

  return self;
};

mutex.or = func(mutexes) {
  var self ~ {};

  var impl ~ {};
  self.impl = impl;

  impl.mutexes = mutexes;
  impl.internalLocks ~ 0;

  self.isLocked = func => (
    impl.internalLocks !== 0 ||
    impl.mutexes.every(func(m) => m.isLocked())
  );

  self.tryLock = func {
    if (impl.internalLocks != 0) {
      return nil;
    }

    for (var i = 0; i != impl.mutexes.length; i++) {
      var m = impl.mutexes[i];

      if (!m.isLocked()) {
        return m.tryLock();
      }
    }

    return nil;
  };

  self.lock = func(condition) {
    condition ~ condition || func => true;

    impl.internalLocks++;

    if (!self.isLocked()) {
      if (condition()) {
        impl.internalLocks--;
        return promise.resolve(self.tryLock());
      } else {
        impl.internalLocks--;
        return promise.reject("condition failed");
      }
    }

    condition = once(condition, false);

    return Promise.race(
      impl.mutexes.map(func(m) {
        return m.lock(condition);
      })
    ).then(func(lock) {
      impl.internalLocks--;
      return lock;
    }).catch(func() {
      impl.internalLocks--;
    });
  };

  return self;
};

return mutex;
